#!/usr/bin/env python3
"""
Script de diagn√≥stico para c√¢mera no Raspberry Pi
Use este script para identificar problemas com a c√¢mera antes de executar o capture_faces.py
"""

import cv2
import os
import subprocess
import sys

def run_command(cmd):
    """Executa um comando e retorna a sa√≠da"""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        return result.stdout.strip(), result.stderr.strip()
    except Exception as e:
        return "", str(e)

def check_usb_devices():
    """Verifica dispositivos USB conectados"""
    print("üîç Verificando dispositivos USB...")
    stdout, stderr = run_command("lsusb")
    if stdout:
        print(stdout)
        # Procura por c√¢meras comuns
        if "camera" in stdout.lower() or "webcam" in stdout.lower() or "video" in stdout.lower():
            print("‚úÖ Poss√≠vel c√¢mera USB detectada!")
        else:
            print("‚ö†Ô∏è  Nenhuma c√¢mera USB √≥bvia detectada")
    else:
        print("‚ùå Erro ao executar lsusb:", stderr)
    print()

def check_video_devices():
    """Verifica dispositivos de v√≠deo dispon√≠veis"""
    print("üîç Verificando dispositivos de v√≠deo...")
    stdout, stderr = run_command("ls /dev/video*")
    if stdout:
        devices = stdout.split('\n')
        print(f"‚úÖ Dispositivos encontrados: {', '.join(devices)}")
        return devices
    else:
        print("‚ùå Nenhum dispositivo /dev/video* encontrado")
        print("Erro:", stderr)
        return []
    print()

def check_v4l_info():
    """Verifica informa√ß√µes detalhadas dos dispositivos V4L2"""
    print("üîç Verificando informa√ß√µes V4L2...")
    stdout, stderr = run_command("v4l2-ctl --list-devices")
    if stdout:
        print(stdout)
    else:
        print("‚ùå v4l2-ctl n√£o dispon√≠vel. Instale com: sudo apt install v4l-utils")
        print("Erro:", stderr)
    print()

def check_user_groups():
    """Verifica se o usu√°rio est√° no grupo video"""
    print("üîç Verificando grupos do usu√°rio...")
    stdout, stderr = run_command("groups")
    if stdout:
        groups = stdout.split()
        if "video" in groups:
            print("‚úÖ Usu√°rio est√° no grupo 'video'")
        else:
            print("‚ö†Ô∏è  Usu√°rio N√ÉO est√° no grupo 'video'")
            print("Execute: sudo usermod -a -G video $USER")
            print("Depois reinicie ou fa√ßa logout/login")
        print(f"Grupos atuais: {', '.join(groups)}")
    else:
        print("‚ùå Erro ao verificar grupos:", stderr)
    print()

def test_opencv_camera():
    """Testa abertura da c√¢mera com OpenCV"""
    print("üîç Testando abertura da c√¢mera com OpenCV...")
    
    # APIs para testar
    apis = [
        (cv2.CAP_V4L2, "V4L2"),
        (cv2.CAP_ANY, "ANY"),
    ]
    
    for idx in range(3):  # Testa √≠ndices 0, 1, 2
        print(f"\nüìπ Testando √≠ndice {idx}:")
        
        for api_code, api_name in apis:
            try:
                print(f"  Tentando {api_name}...", end=" ")
                cap = cv2.VideoCapture(idx, api_code)
                
                if cap.isOpened():
                    ret, frame = cap.read()
                    if ret and frame is not None:
                        h, w = frame.shape[:2]
                        print(f"‚úÖ SUCESSO! Resolu√ß√£o: {w}x{h}")
                        cap.release()
                        return True
                    else:
                        print("‚ùå Abriu mas n√£o conseguiu ler frame")
                else:
                    print("‚ùå N√£o conseguiu abrir")
                
                cap.release()
            except Exception as e:
                print(f"‚ùå Erro: {e}")
        
        # Tenta sem especificar API
        try:
            print(f"  Tentando sem API espec√≠fica...", end=" ")
            cap = cv2.VideoCapture(idx)
            if cap.isOpened():
                ret, frame = cap.read()
                if ret and frame is not None:
                    h, w = frame.shape[:2]
                    print(f"‚úÖ SUCESSO! Resolu√ß√£o: {w}x{h}")
                    cap.release()
                    return True
                else:
                    print("‚ùå Abriu mas n√£o conseguiu ler frame")
            else:
                print("‚ùå N√£o conseguiu abrir")
            cap.release()
        except Exception as e:
            print(f"‚ùå Erro: {e}")
    
    print("\n‚ùå Nenhuma c√¢mera funcional encontrada com OpenCV")
    return False

def test_fswebcam():
    """Testa captura com fswebcam"""
    print("üîç Testando captura com fswebcam...")
    stdout, stderr = run_command("which fswebcam")
    if not stdout:
        print("‚ùå fswebcam n√£o instalado. Instale com: sudo apt install fswebcam")
        return False
    
    # Tenta capturar uma imagem de teste
    cmd = "fswebcam -r 320x240 --no-banner /tmp/test_camera.jpg"
    stdout, stderr = run_command(cmd)
    
    if os.path.exists("/tmp/test_camera.jpg"):
        print("‚úÖ fswebcam conseguiu capturar imagem!")
        # Remove arquivo de teste
        os.remove("/tmp/test_camera.jpg")
        return True
    else:
        print("‚ùå fswebcam falhou")
        if stderr:
            print("Erro:", stderr)
        return False

def main():
    print("üîß DIAGN√ìSTICO DE C√ÇMERA - RASPBERRY PI")
    print("=" * 50)
    print()
    
    # Verifica se est√° rodando no Linux
    if os.name != 'posix':
        print("‚ö†Ô∏è  Este script foi feito para Linux/Raspberry Pi")
        print()
    
    # Executa todos os testes
    check_usb_devices()
    video_devices = check_video_devices()
    check_v4l_info()
    check_user_groups()
    
    opencv_ok = test_opencv_camera()
    fswebcam_ok = test_fswebcam()
    
    print("\n" + "=" * 50)
    print("üìã RESUMO DO DIAGN√ìSTICO:")
    print(f"  OpenCV: {'‚úÖ OK' if opencv_ok else '‚ùå FALHOU'}")
    print(f"  fswebcam: {'‚úÖ OK' if fswebcam_ok else '‚ùå FALHOU'}")
    print(f"  Dispositivos /dev/video*: {len(video_devices)} encontrado(s)")
    
    if opencv_ok:
        print("\nüéâ C√¢mera funcionando! O capture_faces.py deve funcionar.")
    else:
        print("\n‚ùå Problemas detectados. Verifique as dicas acima.")
        print("\nüîß Comandos √∫teis para solu√ß√£o:")
        print("  sudo apt update && sudo apt install fswebcam v4l-utils")
        print("  sudo usermod -a -G video $USER")
        print("  sudo reboot")

if __name__ == "__main__":
    main()